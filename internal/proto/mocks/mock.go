// Code generated by MockGen. DO NOT EDIT.
// Source: broker_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	proto "broker/broker/internal/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockBrokerClient is a mock of BrokerClient interface.
type MockBrokerClient struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerClientMockRecorder
}

// MockBrokerClientMockRecorder is the mock recorder for MockBrokerClient.
type MockBrokerClientMockRecorder struct {
	mock *MockBrokerClient
}

// NewMockBrokerClient creates a new mock instance.
func NewMockBrokerClient(ctrl *gomock.Controller) *MockBrokerClient {
	mock := &MockBrokerClient{ctrl: ctrl}
	mock.recorder = &MockBrokerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerClient) EXPECT() *MockBrokerClientMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockBrokerClient) AddMessage(ctx context.Context, in *proto.RequestProducer, opts ...grpc.CallOption) (*proto.ResponseProducer, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMessage", varargs...)
	ret0, _ := ret[0].(*proto.ResponseProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockBrokerClientMockRecorder) AddMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockBrokerClient)(nil).AddMessage), varargs...)
}

// ConsumerChat mocks base method.
func (m *MockBrokerClient) ConsumerChat(ctx context.Context, opts ...grpc.CallOption) (proto.Broker_ConsumerChatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumerChat", varargs...)
	ret0, _ := ret[0].(proto.Broker_ConsumerChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumerChat indicates an expected call of ConsumerChat.
func (mr *MockBrokerClientMockRecorder) ConsumerChat(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerChat", reflect.TypeOf((*MockBrokerClient)(nil).ConsumerChat), varargs...)
}

// MockBroker_ConsumerChatClient is a mock of Broker_ConsumerChatClient interface.
type MockBroker_ConsumerChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockBroker_ConsumerChatClientMockRecorder
}

// MockBroker_ConsumerChatClientMockRecorder is the mock recorder for MockBroker_ConsumerChatClient.
type MockBroker_ConsumerChatClientMockRecorder struct {
	mock *MockBroker_ConsumerChatClient
}

// NewMockBroker_ConsumerChatClient creates a new mock instance.
func NewMockBroker_ConsumerChatClient(ctrl *gomock.Controller) *MockBroker_ConsumerChatClient {
	mock := &MockBroker_ConsumerChatClient{ctrl: ctrl}
	mock.recorder = &MockBroker_ConsumerChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker_ConsumerChatClient) EXPECT() *MockBroker_ConsumerChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBroker_ConsumerChatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBroker_ConsumerChatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBroker_ConsumerChatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBroker_ConsumerChatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBroker_ConsumerChatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBroker_ConsumerChatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBroker_ConsumerChatClient) Recv() (*proto.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBroker_ConsumerChatClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBroker_ConsumerChatClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBroker_ConsumerChatClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBroker_ConsumerChatClient) Send(arg0 *proto.Consumer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBroker_ConsumerChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBroker_ConsumerChatClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBroker_ConsumerChatClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBroker_ConsumerChatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBroker_ConsumerChatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBroker_ConsumerChatClient)(nil).Trailer))
}

// MockBrokerServer is a mock of BrokerServer interface.
type MockBrokerServer struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerServerMockRecorder
}

// MockBrokerServerMockRecorder is the mock recorder for MockBrokerServer.
type MockBrokerServerMockRecorder struct {
	mock *MockBrokerServer
}

// NewMockBrokerServer creates a new mock instance.
func NewMockBrokerServer(ctrl *gomock.Controller) *MockBrokerServer {
	mock := &MockBrokerServer{ctrl: ctrl}
	mock.recorder = &MockBrokerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerServer) EXPECT() *MockBrokerServerMockRecorder {
	return m.recorder
}

// AddMessage mocks base method.
func (m *MockBrokerServer) AddMessage(arg0 context.Context, arg1 *proto.RequestProducer) (*proto.ResponseProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0, arg1)
	ret0, _ := ret[0].(*proto.ResponseProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockBrokerServerMockRecorder) AddMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockBrokerServer)(nil).AddMessage), arg0, arg1)
}

// ConsumerChat mocks base method.
func (m *MockBrokerServer) ConsumerChat(arg0 proto.Broker_ConsumerChatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumerChat indicates an expected call of ConsumerChat.
func (mr *MockBrokerServerMockRecorder) ConsumerChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerChat", reflect.TypeOf((*MockBrokerServer)(nil).ConsumerChat), arg0)
}

// MockBroker_ConsumerChatServer is a mock of Broker_ConsumerChatServer interface.
type MockBroker_ConsumerChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockBroker_ConsumerChatServerMockRecorder
}

// MockBroker_ConsumerChatServerMockRecorder is the mock recorder for MockBroker_ConsumerChatServer.
type MockBroker_ConsumerChatServerMockRecorder struct {
	mock *MockBroker_ConsumerChatServer
}

// NewMockBroker_ConsumerChatServer creates a new mock instance.
func NewMockBroker_ConsumerChatServer(ctrl *gomock.Controller) *MockBroker_ConsumerChatServer {
	mock := &MockBroker_ConsumerChatServer{ctrl: ctrl}
	mock.recorder = &MockBroker_ConsumerChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker_ConsumerChatServer) EXPECT() *MockBroker_ConsumerChatServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBroker_ConsumerChatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBroker_ConsumerChatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockBroker_ConsumerChatServer) Recv() (*proto.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBroker_ConsumerChatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBroker_ConsumerChatServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBroker_ConsumerChatServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBroker_ConsumerChatServer) Send(arg0 *proto.Consumer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBroker_ConsumerChatServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBroker_ConsumerChatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBroker_ConsumerChatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBroker_ConsumerChatServer) SendMsg(m interface{}) error {

	return nil
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBroker_ConsumerChatServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBroker_ConsumerChatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBroker_ConsumerChatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBroker_ConsumerChatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBroker_ConsumerChatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBroker_ConsumerChatServer)(nil).SetTrailer), arg0)
}
